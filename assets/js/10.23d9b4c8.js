(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{356:function(e,t,a){"use strict";a.r(t);var n=a(43),c=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("批量化在主机上安装docker可以使用docker-machine。")]),e._v(" "),a("p",[e._v("Docker Machine可以支持在不同的环境下安装配置docker host")]),e._v(" "),a("ol",[a("li",[e._v("常规的Linux操作系统")])]),e._v(" "),a("p",[e._v("2）虚拟化平台VirtualBox、Vmware等")]),e._v(" "),a("p",[e._v("3）公有云Amazon Web Services、Microsoft Azure、Google Compute Engine等")]),e._v(" "),a("h3",{attrs:{id:"实验环境描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实验环境描述"}},[e._v("#")]),e._v(" 实验环境描述")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[e._v("操作系统版本")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("ip")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("配置")]),e._v(" "),a("th",{staticStyle:{"text-align":"center"}},[e._v("角色")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[e._v("Ubuntu 18.04.4 LTS")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("172.16.89.101")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("4核8G")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("machine")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[e._v("Ubuntu 18.04.4 LTS")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("172.16.89.100")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("4核8G")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("node1")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[e._v("Ubuntu 18.04.4 LTS")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("172.16.89.99")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("4核8G")]),e._v(" "),a("td",{staticStyle:{"text-align":"center"}},[e._v("node2")])])])]),e._v(" "),a("p",[e._v("官方项目地址位于 https://github.com/docker/machine/releases 目前最新版本是v0.16.2")]),e._v(" "),a("p",[e._v("安装的方法也很简单，只需要执行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine &&\nchmod +x /tmp/docker-machine &&\nsudo cp /tmp/docker-machine /usr/local/bin/docker-machine\n")])])]),a("p",[e._v("执行完成执行docker-machine有正常输出即完成安装")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@docker-machine:~# docker-machine ls\nNAME   ACTIVE   DRIVER   STATE   URL   SWARM   DOCKER   ERRORS\nroot@docker-machine:~# \n")])])]),a("p",[e._v("由于docker-machine再安装host时需要免密登录到远程主机上，所以在machine节点上创建ssh秘钥，并发送到node1节点和node2节点上")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@docker-machine:~# ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:xafvCmF4xRwbNLLI8eOnXZECMYWtqkCBCqPE7Zjj7d0 root@docker-machine\nThe key's randomart image is:\n+---[RSA 2048]----+\n|...   . =**      |\n|+o.. . +.O.= .   |\n|=.+.  o +.O +    |\n|o+..   o.+ + .   |\n|..o   ..S o .    |\n| ...  .o = o     |\n|  ..... o . .    |\n|   ... E . .     |\n|          ...    |\n+----[SHA256]-----+\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@docker-machine:~# ssh-copy-id 172.16.89.100\n...\nroot@172.16.89.100's password: \n...\n\nroot@docker-machine:~# ssh-copy-id 172.16.89.99\n...\nroot@172.16.89.99's password: \n...\n\n")])])]),a("h3",{attrs:{id:"开始安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始安装"}},[e._v("#")]),e._v(" 开始安装")]),e._v(" "),a("p",[e._v("上述操作完成后就可以开始安装了执行docker-machine create子命令在node1上部署docker了")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@docker-machine:~# docker-machine create --driver generic --generic-ip-address=172.16.89.100 node1\nRunning pre-create checks...\nCreating machine...\n(node1) No SSH key specified. Assuming an existing key at the default location.\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(systemd)...\nInstalling Docker...\n")])])]),a("p",[e._v("同样的可以执行"),a("code",[e._v("docker-machine create --driver generic --generic-ip-address=172.16.89.99 node2")]),e._v("在node2上部署docker")]),e._v(" "),a("p",[e._v('在实际执行中发现由于docker-machine默认使用了官方的镜像站下载docker-ce，造成执行过程会一直卡在"Installing Docker..."，如果机器数量较少推荐先在node节点上使用阿里云镜像安装dock-ce，在到machine节点上创建就行了。安装步骤如下')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# step 1: 安装必要的一些系统工具\nsudo apt-get update\nsudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n# step 2: 安装GPG证书\ncurl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n# Step 3: 写入软件源信息\nsudo add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"\n# Step 4: 更新并安装Docker-CE\nsudo apt-get -y update\nsudo apt-get -y install docker-ce\n')])])]),a("p",[e._v("在node1和node2节点上完成docker-ce安装后即可以继续回到machine节点操作了，这种方法仅适用于机器较少的情况，如果机器多安装慢，使用Ansible安装后再执行docker-machine create。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@docker-machine:~# docker-machine ls\nNAME    ACTIVE   DRIVER    STATE     URL                        SWARM   DOCKER     ERRORS\nnode1   -        generic   Running   tcp://172.16.89.100:2376           v19.03.8   \nnode2   -        generic   Running   tcp://172.16.89.99:2376            v19.03.8   \n")])])]),a("p",[e._v("正常输出即表示docker-machine已经把docker在所有node部署好了")]),e._v(" "),a("p",[e._v("登录到任意的node节点查看docker.service配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("vim /etc/systemd/system/docker.service.d/10-machine.conf\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --storage-driver overlay2 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=generic\nEnvironment=\n")])])]),a("p",[e._v("-H tcp://0.0.0.0:2376:使Docker Daemon接收远程连接，非docker-machie安装方式是没有这个选项的")]),e._v(" "),a("p",[e._v("--tls*：对来自远程主机的连接请求启用安全认证和加密措施")]),e._v(" "),a("h4",{attrs:{id:"更好的体验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更好的体验"}},[e._v("#")]),e._v(" 更好的体验")]),e._v(" "),a("p",[e._v("为了得到更好的体验，可以安装bash completion script,从而在bash中使用tab补全命令。项目地址位于")]),e._v(" "),a("p",[e._v("https://github.com/docker/machine/tree/master/contrib/completion/bash")]),e._v(" "),a("p",[e._v("将页面上的三个脚本放到machine上/etc/bash_completion.d目录下，同时添加如下代码到$HOME/.bashrc中")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("source /etc/bash_completion.d/docker-machine-prompt.bash \nsource /etc/bash_completion.d/docker-machine.bash \nsource /etc/bash_completion.d/docker-machine-wrapper.bash\nPS1='[\\u@\\h \\W$(__docker_machine_ps1 \" [%s]\")]\\$'\n")])])]),a("p",[e._v("docker-machine env子命令可以提示操作node节点所需的环境变量")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[root@docker-machine ~]# docker-machine env node1\nexport DOCKER_TLS_VERIFY="1"\nexport DOCKER_HOST="tcp://172.16.89.100:2376"\nexport DOCKER_CERT_PATH="/root/.docker/machine/machines/node1"\nexport DOCKER_MACHINE_NAME="node1"\n# Run this command to configure your shell: \n# eval $(docker-machine env node1)\n')])])]),a("p",[e._v("执行"),a("code",[e._v("eval $(docker-machine env node1)")]),e._v("就可以切换到node1上执行指令同时提示符也会变成node1")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@docker-machine ~]# eval $(docker-machine env node1)\n[root@docker-machine ~ [node1]]# \n")])])]),a("p",[e._v("在其上执行的所有docker命令搜相当于node1上执行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@docker-machine ~ [node1]]# docker pull nginx:alpine\nalpine: Pulling from library/nginx\ncbdbe7a5bc2a: Pull complete \nc554c602ff32: Pull complete \nDigest: sha256:763e7f0188e378fef0c761854552c70bbd817555dc4de029681a2e972e25e30e\nStatus: Downloaded newer image for nginx:alpine\ndocker.io/library/nginx:alpine\n")])])]),a("p",[e._v("回到node1终端上，发现nginx:alpine镜像已下载，而且machine节点上是没有这个镜像的")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@node1:~# docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nnginx               alpine              89ec9da68213        2 weeks ago         19.9MB\n")])])]),a("p",[e._v("其他的docker命令都可以通过eval $(docker-machine env nodeX)上切换到相应的node节点执行docker子命令")]),e._v(" "),a("h3",{attrs:{id:"docker-machine子命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-machine子命令"}},[e._v("#")]),e._v(" docker-machine子命令")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("子命令")]),e._v(" "),a("th",[e._v("效果")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("active")]),e._v(" "),a("td",[e._v("输出处于active状态的node节点")])]),e._v(" "),a("tr",[a("td",[e._v("config")]),e._v(" "),a("td",[e._v("查看machine的damon配置")])]),e._v(" "),a("tr",[a("td",[e._v("create")]),e._v(" "),a("td",[e._v("创建machine")])]),e._v(" "),a("tr",[a("td",[e._v("env")]),e._v(" "),a("td",[e._v("显示node节点的环境变量")])]),e._v(" "),a("tr",[a("td",[e._v("ls")]),e._v(" "),a("td",[e._v("显示node节点的状态信息")])]),e._v(" "),a("tr",[a("td",[e._v("stop/start/restart")]),e._v(" "),a("td",[e._v("对node所在的操作系统执行开关重启操作")])]),e._v(" "),a("tr",[a("td",[e._v("scp")]),e._v(" "),a("td",[e._v("在node节点中复制数据")])]),e._v(" "),a("tr",[a("td",[e._v("upgrade")]),e._v(" "),a("td",[e._v("将node节点上的docker升级到最新版本")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker-machine scp node1:/tmp/a.txt node2:/tmp/\n")])])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("在多主机环境上使用docker-machine部署docker将大大提高效率。当然由于默认使用的国外的镜像源，安装docker会很慢，介意的话最好先用Ansible批量化安装docker再执行docker-machine将所有机器加入控制主机。")])])}),[],!1,null,null,null);t.default=c.exports}}]);