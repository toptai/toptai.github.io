(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(e,s,n){"use strict";n.r(s);var o=n(43),t=Object(o.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("默认情况下，在mysql容器中创建新库时需要先运行mysql容器，把需要的sql文件通过docker cp的方式拷贝至容器内，再通过mysql的子命令将sql文件导入。过程比较繁琐，如果是公司的项目部署，可以创建带有公司的项目sql的自定义mysql镜像，避免繁琐的流程。")]),e._v(" "),n("h3",{attrs:{id:"背景分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景分析"}},[e._v("#")]),e._v(" 背景分析")]),e._v(" "),n("p",[e._v("首先拉取官方镜像：")]),e._v(" "),n("p",[n("code",[e._v("docker pull mysql:5.7.30")])]),e._v(" "),n("p",[e._v("查看镜像的构建历史")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[root@bochs docker]# docker history mysql:5.7.30 \nIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n...               \n<missing>           29 hours ago        /bin/sh -c #(nop)  ENTRYPOINT ["docker-entrypoint.sh"]   0B                              \n...    \n')])])]),n("p",[e._v("可以发现，默认的entrypoint为"),n("code",[e._v("docker-entrypoint.sh")])]),e._v(" "),n("p",[e._v("进入容器内，可以发现"),n("code",[e._v("docker-entrypoint.sh")]),e._v("其实是个软连接")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("lrwxrwxrwx   1 root root   34 May 15 20:11 entrypoint.sh -> usr/local/bin/docker-entrypoint.sh\n")])])]),n("p",[e._v("查看此脚本，发现脚本中已经定义了初始化的代码：")]),e._v(" "),n("p",[e._v("1、"),n("code",[e._v("docker_process_init_file()")]),e._v("函数定义了初始文件的格式，其中调用了"),n("code",[e._v("docker_process_sql")]),e._v("来完成新库创建及数据导入。")]),e._v(" "),n("p",[e._v("初始化文件可以是**.sh** "),n("strong",[e._v(".sql")]),e._v(" "),n("strong",[e._v(".sql.gz")]),e._v(" "),n("strong",[e._v(".sql.xz")]),e._v("格式中的任一种")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  docker_process_init_files() {\n          # mysql here for backwards compatibility "${mysql[@]}"\n          mysql=( docker_process_sql )\n  \n          echo\n          local f\n          for f; do\n                  case "$f" in\n                          *.sh)\n                                  # https://github.com/docker-library/postgres/issues/450#issuecomment-393167936\n                                  # https://github.com/docker-library/postgres/pull/452\n                                  if [ -x "$f" ]; then\n                                          mysql_note "$0: running $f"\n                                          "$f"\n                                  else\n                                          mysql_note "$0: sourcing $f"\n                                          . "$f"\n                                  fi\n                                  ;;\n                          *.sql)    mysql_note "$0: running $f"; docker_process_sql < "$f"; echo ;;\n                          *.sql.gz) mysql_note "$0: running $f"; gunzip -c "$f" | docker_process_sql; echo ;;\n                          *.sql.xz) mysql_note "$0: running $f"; xzcat "$f" | docker_process_sql; echo ;;\n                          *)        mysql_warn "$0: ignoring $f" ;;\n                  esac\n                  echo\n          done\n}\n')])])]),n("p",[e._v("2、"),n("code",[e._v("docker_process_sql")]),e._v("使用mysql命令导入数据库文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('docker_process_sql() {\n         passfileArgs=()\n         if [ \'--dont-use-mysql-root-password\' = "$1" ]; then\n                 passfileArgs+=( "$1" )\n                 shift\n         fi\n        \n         if [ -n "$MYSQL_DATABASE" ]; then\n                 set -- --database="$MYSQL_DATABASE" "$@"\n         fi\n \n         mysql --defaults-extra-file=<( _mysql_passfile "${passfileArgs[@]}") --protocol=socket -uroot -hlocalhost --socket="${SOCKET}" "$@"\n}\n\n')])])]),n("p",[e._v("3、在主函数调用了docker_process_init_file()函数,初始化的文件全部位于"),n("code",[e._v("/docker-entrypoint-initdb.d/")]),e._v("中")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("365         docker_process_init_files /docker-entrypoint-initdb.d/*\n")])])]),n("p",[e._v("只要把sql文件放入该目录我们就可以通过docker build命令来创建带有自定义库的mysql镜像了。")]),e._v(" "),n("h3",{attrs:{id:"实现过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现过程"}},[e._v("#")]),e._v(" 实现过程")]),e._v(" "),n("p",[e._v("创建新的Dockerfile文件，将所需要的用到的sql文件拷贝到/docker-entrypoint-initdb.d/目录中")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" FROM mysql:5.7.30\n COPY ./mysql/initsql/*.sql /docker-entrypoint-initdb.d/\n")])])]),n("p",[e._v("docker-compose文件如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('   version: "3.3"\n   \n   services:\n     mysql:\n       build:\n         context: .\n         dockerfile: Dockerfile\n       image: mysql_modified:v1.0\n       container_name: mysql_modified\n       ports:\n        - target: 3306\n          published: 3306\n          protocol: tcp\n          mode: host\n       volumes:\n          - /home/docker/mysql/initsql/:/docker-entrypoint-initdb.d/\n          - /home/docker/mysql/conf/:/etc/mysql/conf.d/\n          - /home/docker/mysql/data/:/var/lib/mysql/\n       environment:\n          - MYSQL_ROOT_PASSWORD=Zxczxc@123\n')])])]),n("p",[e._v("新建测试用的test.sql文件  "),n("font",{attrs:{color:"red"}},[e._v("如果是用mysqldump导出的sql文件，必须要加上**-B**参数保留创库语句。")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("CREATE DATABASE IF NOT EXISTS DB_TEST;\n\nUSE DB_TEST;\n \nCREATE TABLE employees (\n    emp_no       INT             NOT NULL COMMENT '主键',\n    birth_date    DATE           NOT NULL COMMENT '生日',\n    first_name   VARCHAR(14)     NOT NULL COMMENT '用户-姓',\n    last_name    VARCHAR(16)     NOT NULL COMMENT '用户-名',\n    gender        ENUM ('M','F') NOT NULL COMMENT '性别',\n    hire_date     DATE           NOT NULL COMMENT '入职时间',\n    PRIMARY KEY (emp_no)\n);\n\nINSERT INTO `employees` VALUES \n(10001,'1953-09-02','Georgi','Facello','M','1986-06-26'),\n(10002,'1964-06-02','Bezalel','Simmel','F','1985-11-21'),\n(10003,'1959-12-03','Parto','Bamford','M','1986-08-28'),\n(10004,'1954-05-01','Chirstian','Koblick','M','1986-12-01');\n")])])]),n("p",[e._v("整个构建目录结构如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@bochs /]# tree home\nhome\n`-- docker\n    |-- docker-compose.yml\n    |-- Dockerfile\n    `-- mysql\n        |-- conf\n        |   `-- my.cnf\n        |-- data\n        `-- initsql\n            `-- test.sql\n\n5 directories, 4 files\n")])])]),n("p",[e._v("使用"),n("code",[e._v("docker-compose build")]),e._v("命令构建新的带有默认库mysql镜像")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@bochs docker]# docker-compose build\nBuilding mysql\nStep 1/2 : FROM mysql:5.7.30\n ---\x3e b84d68d0a7db\nStep 2/2 : COPY ./mysql/initsql/*.sql /docker-entrypoint-initdb.d/\n ---\x3e c64103df17a2\n\nSuccessfully built c64103df17a2\nSuccessfully tagged mysql_modified:v1.0\n\n[root@bochs docker]# docker image ls\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nmysql_modified      v1.0                c64103df17a2        32 seconds ago      448MB\nmysql               5.7.30              b84d68d0a7db        30 hours ago        448MB\n")])])]),n("p",[e._v("完成镜像创建后使用"),n("code",[e._v("docker-compose up -d")]),e._v("启动该容器并查看数据，新库已成功创建，数据也正常。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("[root@bochs docker]# docker-compose up -d\n\n[root@bochs docker]# docker exec -it  mysql_modified mysql -uroot -p'Zxczxc@123' -e 'show databases;'\nmysql: [Warning] Using a password on the command line interface can be insecure.\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| DB_TEST            |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n\n[root@bochs docker]# docker exec -it  mysql_modified mysql -uroot -p'Zxczxc@123' -e 'select * from DB_TEST.employees;\\G'\nmysql: [Warning] Using a password on the command line interface can be insecure.\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n")])])]),n("h3",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("放入"),n("code",[e._v("/docker-entrypoint-initdb.d/")]),e._v("目录中的文件只会在构建镜像时执行一次")]),e._v(" "),n("p",[e._v("可以将多个数据库放入"),n("code",[e._v("/docker-entrypoint-initdb.d/")]),e._v("中达到批量化创建的目的")])])}),[],!1,null,null,null);s.default=t.exports}}]);