(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{355:function(e,t,a){"use strict";a.r(t);var s=a(43),l=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Dockerfile中的RUN，CMD，ENTRTPOINT三个指令均可以用来指明容器中所运行的指令，但这三者存在的细微的区别。\n")]),e._v(" "),a("p",[e._v("简单来说：")]),e._v(" "),a("h3",{attrs:{id:"run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[e._v("#")]),e._v(" RUN")]),e._v(" "),a("p",[e._v("RUN指令一般用于在容器内安装软件包或者是执行其他的命令，如")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("RUN yum install -y telnet\nRUN touch web.xml\n")])])]),a("h3",{attrs:{id:"cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),a("p",[e._v("CMD指令主要用来指明生成的Docker镜像在启动时的命令及参数，这个指令可以被docker run后面的命令所取代，比如下面这个Dockerfile文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM busybox\nCMD echo "hello world"\n')])])]),a("p",[e._v('CMD指明了Docker镜像在运行时的输出一个"hello world"')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[root@bochs Docker]# docker build -t test .\nSending build context to Docker daemon  2.048kB\nStep 1/2 : FROM busybox\n ---\x3e 83aa35aa1c79\nStep 2/2 : CMD echo "hello world"\n ---\x3e Running in a1a4d74137d2\nRemoving intermediate container a1a4d74137d2\n ---\x3e 651b45b58fe9\nSuccessfully built 651b45b58fe9\nSuccessfully tagged test:latest\n[root@bochs Docker]# docker run -it test\nhello world\n')])])]),a("p",[e._v("但是如果在docker run后添加其他指令。那么CMD将直接被替换")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@bochs Docker]# docker run -it test ls\nbin   dev   etc   home  proc  root  sys   tmp   usr   var\n")])])]),a("h3",{attrs:{id:"entrypoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[e._v("#")]),e._v(" ENTRYPOINT")]),e._v(" "),a("p",[e._v("ENTRYPOINT与CMD类似，区别在于ENTRYPOINT"),a("strong",[e._v("一定")]),e._v("会被执行。如果一个Dockerfile中同时存在ENTRYPOINT和")]),e._v(" "),a("p",[e._v("CMD，CMD中的参数会被当做额外参数传给ENTRYPOINT。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('[root@bochs Docker]# cat Dockerfile \nFROM busybox\nENTRYPOINT ["/bin/echo","hello"]\nCMD ["world"]\n')])])]),a("p",[e._v("通过docker run 来运行，CMD变成了ENTRYPOINT的参数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@bochs Docker]# docker run -it test2 \nhello world\n")])])]),a("p",[e._v("但是如果指明docker run 的参数china，那么输出就会变为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@bochs Docker]# docker run -it test2 china\nhello china\n")])])]),a("p",[e._v("原本CMD中带的参数world被docker run中的china所替换，但ENTRYPOINT自带的hello依然正常输出")]),e._v(" "),a("h3",{attrs:{id:"shell与exec格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell与exec格式"}},[e._v("#")]),e._v(" Shell与Exec格式")]),e._v(" "),a("p",[e._v("CMD，RUN，ENTRYPOINT可以用两种格式来传递命令和参数，Shell一般表示为指令+命令，如:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('RUN yum install -y telnet\nCMD echo "hello world"\n')])])]),a("p",[e._v("第一个大写的单词是Dockerfile的指令。后面跟的就是命令，可以拿到shell中单独执行")]),e._v(" "),a("p",[e._v('Exec格式可以表示为:指令+["命令","命令参数1","命令参数2",...],比如:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('RUN ["yum","install","telnet"]\nENTRYPOINT ["/bin/bash","-c","echo hello world"]\n')])])]),a("p",[e._v("对于这两种格式来说，CMD和ENTRYPOINT最好使用Exec格式，命令和参数分开，层次性较强，而RUN则都可以。")]),e._v(" "),a("p",[a("strong",[e._v("注意")]),e._v("：ENTRYPOINT的Shell格式和Exec格式差异很大。比如下面这个Shell格式的ENTRYPOINT")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM busybox\nENTRYPOINT echo "hello"\nCMD "world"\n')])])]),a("p",[e._v('在运行所生成的容器时，仅会输出hello，而CMD带的"world"会被'),a("s",[e._v("忽略")]),e._v("。同样的docker run带的参数也同样会被"),a("s",[e._v("忽略")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[root@bochs Docker]# docker run -it test\nhello\n[root@bochs Docker]# docker run -it test china\nhello\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);